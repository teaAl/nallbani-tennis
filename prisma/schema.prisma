generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  emailVerified    DateTime?
  password         String?
  avatar           String?
  role             UserRole[]
  status           MemberStatus      @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  phoneNumber      String?
  dateOfBirth      DateTime?
  bio              String?
  parentId         String?
  level            SkillLevel?
  notesForCoach    String?
  preferedPlayTime PreferedPlayTime?
  bookings         Booking[]
  groups           GroupMember[]
  lessonsAttended  LessonAttendee[]
  achievements     UserAchievement[]
  subscriptions    UserPackage[]
  progress         UserProgress?
  parent           User?             @relation("ParentToChild", fields: [parentId], references: [id])
  children         User[]            @relation("ParentToChild")

  @@map("users")
}

model Staff {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            StaffRole        @default(COACH)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  phoneNumber     String?
  specialties     String?
  experience      Int?
  bio             String?
  active          Boolean          @default(true)
  groupsLeading   Group[]
  lessonsCoach    Lesson[]
  progressUpdates ProgressUpdate[]

  @@map("staff")
}

model CourtAvailability {
  id        String    @id @default(cuid())
  courtId   String
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  court     Court     @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@map("court_availability")
}

model Court {
  id           String              @id @default(cuid())
  name         String
  type         CourtType           @default(HARD)
  indoor       Boolean             @default(false)
  active       Boolean             @default(true)
  bookings     Booking[]
  availability CourtAvailability[]
  lessons      Lesson[]

  @@map("courts")
}

model Lesson {
  id              String           @id @default(cuid())
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  type            LessonType
  level           SkillLevel
  maxCapacity     Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  canceled        Boolean          @default(false)
  coachId         String
  courtId         String?
  groupId         String?
  attendees       LessonAttendee[]
  coach           Staff            @relation(fields: [coachId], references: [id])
  court           Court?           @relation(fields: [courtId], references: [id], onDelete: Cascade)
  group           Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  progressUpdates ProgressUpdate[]

  @@map("lessons")
}

model LessonAttendee {
  id        String   @id @default(cuid())
  lessonId  String
  userId    String
  attended  Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lessonId, userId])
  @@map("lesson_attendees")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  level       SkillLevel
  dayOfWeek   DayOfWeek[]
  startTime   String
  endTime     String
  startDate   DateTime
  endDate     DateTime?
  price       Decimal?      @db.Decimal(10, 2)
  maxCapacity Int
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  coachId     String
  members     GroupMember[]
  coach       Staff         @relation(fields: [coachId], references: [id])
  lessons     Lesson[]
  packages    Package[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  joinedAt DateTime @default(now())
  active   Boolean  @default(true)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Booking {
  id            String        @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        BookingState  @default(PENDING)
  price         Decimal?      @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(UNPAID)
  notes         String?
  userId        String
  courtId       String
  court         Court         @relation(fields: [courtId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Package {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Decimal       @db.Decimal(10, 2)
  duration     Int
  lessonCount  Int
  level        SkillLevel
  benefits     String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  groupId      String?
  group        Group?        @relation(fields: [groupId], references: [id])
  userPackages UserPackage[]

  @@map("packages")
}

model UserPackage {
  id               String        @id @default(cuid())
  userId           String
  packageId        String
  startDate        DateTime
  endDate          DateTime
  lessonsRemaining Int
  status           PackageStatus
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  package          Package       @relation(fields: [packageId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@map("user_packages")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String
  description      String
  category         String
  icon             String?
  pointValue       Int
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  awardedAt     DateTime    @default(now())
  notes         String?
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserProgress {
  id                   String           @id @default(cuid())
  userId               String           @unique
  overallProgress      Decimal          @default(0) @db.Decimal(5, 2)
  forehandProgress     Decimal          @default(0) @db.Decimal(5, 2)
  backhandProgress     Decimal          @default(0) @db.Decimal(5, 2)
  serveProgress        Decimal          @default(0) @db.Decimal(5, 2)
  volleyProgress       Decimal          @default(0) @db.Decimal(5, 2)
  footworkProgress     Decimal          @default(0) @db.Decimal(5, 2)
  currentStreak        Int              @default(0)
  longestStreak        Int              @default(0)
  totalLessonsAttended Int              @default(0)
  lastUpdated          DateTime         @default(now())
  progressUpdates      ProgressUpdate[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model ProgressUpdate {
  id             String       @id @default(cuid())
  userProgressId String
  coachId        String
  lessonId       String?
  forehandUpdate Decimal?     @db.Decimal(5, 2)
  backhandUpdate Decimal?     @db.Decimal(5, 2)
  serveUpdate    Decimal?     @db.Decimal(5, 2)
  volleyUpdate   Decimal?     @db.Decimal(5, 2)
  footworkUpdate Decimal?     @db.Decimal(5, 2)
  notes          String?
  createdAt      DateTime     @default(now())
  coach          Staff        @relation(fields: [coachId], references: [id])
  lesson         Lesson?      @relation(fields: [lessonId], references: [id])
  userProgress   UserProgress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)

  @@map("progress_updates")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum UserRole {
  STUDENT
  PARENT
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
  UNCOMPLETE
}

enum PreferedPlayTime {
  MORNING
  LATE_MORNING
  AFTERNOON
  EVENING
  NIGHT
  ANYTIME
}

enum StaffRole {
  ADMIN
  COACH
}

enum CourtType {
  CLAY
  HARD
  GRASS
  CARPET
}

enum LessonType {
  PRIVATE
  GROUP
  CAMP
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingState {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  REFUNDED
}

enum PackageStatus {
  ACTIVE
  EXPIRED
  CANCELED
}
